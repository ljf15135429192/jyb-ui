import{o as n,a,z as e}from"./vue-libs-9b0981d5.js";const s={class:"van-doc-markdown-body"},t=e(`<h2 id="fa-bu-npm" tabindex="-1">发布npm</h2><div class="van-doc-card"><h3 id="1-npmzhu-ce-deng-lu" tabindex="-1">1、npm注册登录</h3><ul><li>先去npm官网注册账号：<a href="https://www.npmjs.com/%EF%BC%8C%E6%88%96%E8%80%85%E9%80%9A%E8%BF%87%E7%BB%88%E7%AB%AF%E5%91%BD%E4%BB%A4%E6%B3%A8%E5%86%8C%EF%BC%9A" target="_blank">https://www.npmjs.com/，或者通过终端命令注册：</a></li></ul><pre><code class="language-bash">npm adduser
</code></pre><ul><li>终端命令，登录npm账号：</li></ul><pre><code class="language-bash">npm login
</code></pre><p>依次输入用户名和密码登录即可，登录成功后下次就不用再登录了。</p></div><div class="van-doc-card"><h3 id="2-diao-shi-npm" tabindex="-1">2、调试npm</h3><p>如果不需要调试，可以跳过调试步骤，直接发布。</p><ul><li><p>npm项目根目录运行终端命令：</p><pre><code class="language-bash">npm <span class="hljs-built_in">link</span>
</code></pre><p>运行后即将该npm包放进了本地npm缓存里，</p></li><li><p>如果要在其他项目（例如项目名叫aaa）里引用调试，只需要在在aaa里运行命令：</p><pre><code class="language-bash">npm <span class="hljs-built_in">link</span> 包名
</code></pre><p>这样就在aaa里建立了包名到npm包的链接关联，通过常规方式引入就可以测试npm包了。</p></li><li><p>如果要取消项目aaa与npm包的关联，在aaa项目下运行命令：</p><pre><code class="language-bash">npm <span class="hljs-built_in">unlink</span> 包名
</code></pre><p>为了防止本地调试npm与发布后的npm混淆冲突，在调试完成后一定记得手动取消项目关联。</p></li></ul></div><div class="van-doc-card"><h3 id="3-fa-bu" tabindex="-1">3、发布</h3><p>在npm包项目根目录运行命令：</p><pre><code class="language-bash">npm publish
</code></pre><p>运行完后，稍等片刻，在npm官网就可以搜索到发布的该npm包了。</p><ul><li>因为很多人把npm源都切到了淘宝源，毕竟速度快，但是发布npm前需要先恢复到npm官方源上，否则发布失败，切换命令：</li></ul><pre><code class="language-bash">// 配置npm全局使用淘宝镜像源
npm config <span class="hljs-built_in">set</span> registry https://registry.npm.taobao.org
// 配置npm全局恢复官方镜像源
npm config <span class="hljs-built_in">set</span> registry https://registry.npmjs.org

</code></pre><p>或者呢，在项目根目录新建.npmrc文件，写入以下内容即可：</p><pre><code>registry=https://registry.npmjs.org
</code></pre><p>这样，在此项目下运行npm命令时，默认使用的仓库都是配置官方源，不影响其他项目。</p><ul><li>发布后的成果页面：<a href="https://www.npmjs.com/package/wxmp-rsa" target="_blank">https://www.npmjs.com/package/wxmp-rsa</a></li></ul><p>如果要发布一个beta包，运行命令：</p><pre><code class="language-bash">npm publish --tag beta
</code></pre><ul><li>其实就是发布了一个标签，标签名可以自定义，例如 alpha next。</li></ul></div><div class="van-doc-card"><h3 id="4-cheng-yuan-quan-xian" tabindex="-1">4、成员权限</h3><p>发布npm是用自己的账号发布的，默认只有自己能更新包，如果想要给其他人更新npm包的权限，按以下方式： 打开npm包所在页面，点击右方settings栏，然后在Invite maintainer模块，输入要加入权限的npm账号的username，然后点击invite就加入，下方Maintainers就是有权限的npm项目成员列表。</p><p><img src="https://shigongbang.obs.cn-east-3.myhuaweicloud.com/ankQENEvu5f154Xg3GZRY.png" alt="image-20221019162907091"></p></div><div class="van-doc-card"><h3 id="5-zuo-fei-he-shan-chu" tabindex="-1">5、作废和删除</h3><p><img src="https://shigongbang.obs.cn-east-3.myhuaweicloud.com/AYVMoZa1nA2HbHidLPX5T.png" alt="image-20221019163622388"></p><p>（上图是npm包页面的settings栏，拉到页面最下面就能看到。能删除的才会显示Delete项。）</p><p>（1）<strong>作废npm包</strong>，就是这里的 Deprecate package，就是给npm包打上已作废的标签，表示不再更新维护。</p><p>在npm包页面展示（示例：@babel/polyfill）以及npm i下载时会有提示。</p><p>也可以通过命令行操作：<code>npm deprecate &lt;package-name&gt; &quot;&lt;message&gt;&quot;</code></p><p>具体可以查看npm官方政策：<a href="https://docs.npmjs.com/deprecating-and-undeprecating-packages-or-package-versions" target="_blank">传送门</a></p><p>（2）<strong>删除已发布的包</strong>，这是非常危险的行为，除非你确定这个包没有其他人使用。</p><p>npm官网的删除政策这几年一直在变，我记得之前是不允许删除，现在又可以了，但有一些限制，需满足以下几点才能删除：</p><ul><li>没有其他npm包依赖此包</li><li>上一周的npm下载量不超过300</li><li>npm包成员只存在一个拥有者或管理员 具体可以查看npm官方政策：<a href="https://docs.npmjs.com/policies/unpublish" target="_blank">传送门</a></li></ul></div>`,6),i=[t],d={__name:"npm",setup(l,{expose:p}){return p({frontmatter:{}}),(m,o)=>(n(),a("div",s,i))}};export{d as default};
